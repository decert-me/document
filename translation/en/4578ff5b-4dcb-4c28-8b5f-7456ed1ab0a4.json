{
  "title": "Using Foundry to Write Solidity Unit Tests",
  "answers": "Nxo9AD0W",
  "content": "",
  "creator": "0x7B082A51792c5528f98dC6F5660bdeB3573766Fd",
  "endTIme": null,
  "version": 1.2,
  "questions": [
    {
      "type": "open_quest",
      "score": 10,
      "title": "Write test cases for the DepositETH method of the bank contract to check the following:\n\n1. Assert that the Deposit event output meets expectations.\n2. Assert that the user's deposit amount in the Bank contract is updated correctly before and after the deposit.\n\nRequirement: Submit the complete source code of the BankTest.sol test contract directly.\n```\ncontract Bank {\n mapping(address => uint) public balanceOf;\n\n event Deposit(address indexed user, uint amount);\n\n function depositETH() external payable {\n require(msg.value > 0, \"Deposit amount must be greater than 0\");\n balanceOf[msg.sender] += amount;\n emit Deposit(msg.sender, amount);\n }\n}\n```\n"
    }
  ],
  "startTime": "2024-03-11T13:13:09.179Z",
  "description": "Using Foundry to write Solidity unit tests is an efficient way to ensure the robustness and correctness of your smart contract code. Foundry is a widely used smart contract development and testing framework in the Solidity developer community, providing a powerful set of tools to compile, test, and deploy Ethereum smart contracts.",
  "estimateTime": 1800,
  "passingScore": 6
}
