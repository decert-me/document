{
    "title": "Write ERC721 NFT Contract",
    "description": "The ERC721 standard represents non-fungible tokens (NFTs), which provide on-chain representation for unique assets. From digital artwork to virtual property, the concept of NFTs is rapidly gaining worldwide recognition. Understanding and being able to implement the ERC721 standard is crucial for blockchain developers. Through this challenge, you can not only become familiar with Solidity programming, but also understand how ERC721 contracts work.",
    "questions": [
        {
            "title": "Write ERC721 NFT Contract",
            "description": "## Introduction\n\nThe ERC721 standard represents non-fungible tokens (NFTs), which provide on-chain representation for unique assets. From digital artwork to virtual property, the concept of NFTs is rapidly gaining worldwide recognition. Understanding and being able to implement the ERC721 standard is crucial for blockchain developers. Through this challenge, you can not only become familiar with Solidity programming, but also understand how ERC721 contracts work.\n\n## Objective\n\nYour task is to create a smart contract that follows the ERC721 standard, which can be used to mint and trade NFTs on the Ethereum blockchain.\n\n## Related Resources\n\nTo help complete this challenge, the following resources may be useful:\n• [EIP-721 Standard](https://eips.ethereum.org/EIPS/eip-721)\n• [OpenZeppelin ERC721 Smart Contract Library](https://docs.openzeppelin.com/contracts/5.x/erc721)\n\n## Note\n\n* When writing the contract, it is necessary to adhere to the ERC721 standard, as well as consider security to ensure that transfer and authorization functions operate correctly at all times.\n* The code template already includes the basic framework, and you only need to write your code in the section marked as `/**code*/`. Do not modify the existing content! * Before submission, ensure that all relevant test cases have been passed\n",
            "type": "coding",
            "score": 100,
            "languages": [
                "Solidity"
            ],
            "code_snippets": [
                {
                    "lang": "Solidity",
                    "code": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\ncontract BaseERC721 {\n    using Strings for uint256;\n    using Address for address;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Token baseURI\n    string private _baseURI;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed approved,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    /**\n     * @dev Initializes the contract by setting a `name`, a `symbol` and a `baseURI` to the token collection.\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        string memory baseURI_\n    ) {\n        /**code*/\n\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public pure returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\n            interfaceId == 0x5b5e139f;   // ERC165 Interface ID for ERC721Metadata\n    }\n    \n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view returns (string memory) {\n        /**code*/\n\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view returns (string memory) {\n        /**code*/\n        \n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\n        require(\n            /**code*/,\n            \"ERC721Metadata: URI query for nonexistent token\"\n        );\n\n        // should return baseURI\n        /**code*/\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` must not exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function mint(address to, uint256 tokenId) public {\n        require(/**code*/ , \"ERC721: mint to the zero address\");\n        require(/**code*/, \"ERC721: token already minted\");\n\n        /**code*/\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        /**code*/\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        /**code*/\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(/**code*/, \"ERC721: approval to current owner\");\n\n        require(\n            /**code*/,\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n       _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(\n            /**code*/,\n            \"ERC721: approved query for nonexistent token\"\n        );\n\n        /**code*/\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public {\n        address sender = msg.sender;\n        require(/**code*/, \"ERC721: approve to caller\");\n        \n        /**code*/\n\n        emit ApprovalForAll(sender, operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(\n        address owner,\n        address operator\n    ) public view returns (bool) {\n        /**code*/\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        require(\n            _isApprovedOrOwner(msg.sender, tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public {\n        require(\n            _isApprovedOrOwner(msg.sender, tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal {\n        _transfer(from, to, tokenId);\n        require(\n            _checkOnERC721Received(from, to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        /**code*/\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(\n        address spender,\n        uint256 tokenId\n    ) internal view returns (bool) {\n        require(\n            /**code*/,\n            \"ERC721: operator query for nonexistent token\"\n        );\n\n        /**code*/\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        require(\n           /**code*/,\n            \"ERC721: transfer from incorrect owner\"\n        );\n\n        require(/**code*/, \"ERC721: transfer to the zero address\");\n\n        /**code*/\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        /**code*/\n\n        emit Approval(ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try\n                IERC721Receiver(to).onERC721Received(\n                    msg.sender,\n                    from,\n                    tokenId,\n                    _data\n                )\n            returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\n                        \"ERC721: transfer to non ERC721Receiver implementer\"\n                    );\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n}\n\ncontract BaseERC721Receiver is IERC721Receiver {\n    constructor() {}\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}",
                    "correctAnswer": ""
                }
            ],
            "spj_code": [
                {
                    "frame": "Hardhat",
                    "code": "const { expect } = require('chai');\nconst { ethers } = require('hardhat');\n\n\ndescribe(\"BaseERC721\", async () => {\n    let contract, contractAddr;\n    let receivercontract, receivercontractAddr;\n    let accounts, owner;\n    const name = 'BaseERC721';\n    const symbol = 'BERC721';\n    const baseURI = 'https://images.example.com/';\n\n    const randomAccount = ethers.Wallet.createRandom();\n    const randomAddr = randomAccount.address;\n    const ZeroAddress = ethers.constants.AddressZero;\n\n\n    async function init() {\n        // 部署 BaseERC721\n        accounts = await ethers.getSigners();\n        owner = accounts[0];\n\n        {\n            const factory = await ethers.getContractFactory('BaseERC721');\n            contract = await factory.deploy(...[name, symbol, baseURI]);\n            await contract.deployed();\n        }\n        {\n            const factory = await ethers.getContractFactory('BaseERC721Receiver');\n            receivercontract = await factory.deploy();\n            await receivercontract.deployed();\n        }\n\n        contractAddr = contract.address;\n        receivercontractAddr = receivercontract.address;\n    }\n\n    beforeEach(async () => {\n        await init();\n    })\n\n    describe(\"IERC721Metadata\", async () => {\n        it(\"name\", async () => {\n            expect(await contract.name()).to.equal(name);\n        });\n\n        it(\"symbol\", async () => {\n            expect(await contract.symbol()).to.equal(symbol);\n        });\n\n        describe(\"tokenURI\", async () => {\n            it(\"URI query for nonexistent token should revert\", async () => {\n                const NONE_EXISTENT_TOKEN_ID = 1234\n                await expect(\n                    contract.tokenURI(NONE_EXISTENT_TOKEN_ID)\n                ).to.be.revertedWith(\"ERC721Metadata: URI query for nonexistent token\");\n            });\n\n            it('Should return baseURI when tokenId exists', async function () {\n                const tokenId = 1\n                await contract.connect(owner).mint(randomAddr, tokenId);\n\n                const expectURI = baseURI + String(tokenId);\n                expect(await contract.tokenURI(tokenId)).to.equal(expectURI);\n            });\n        })\n    })\n\n    describe(\"IERC721\", async () => {\n        describe(\"balanceOf \", async () => {\n            it(\"balanceOf\", async () => {\n                // before should be 0\n                const beforeBalance = await contract.balanceOf(randomAddr);\n                expect(beforeBalance).to.equal(0);\n\n                // mint\n                await contract.connect(owner).mint(randomAddr, 1);\n\n                // after should be 1\n                const afterBalance = await contract.balanceOf(randomAddr);\n                expect(afterBalance).to.equal(1);\n            });\n        });\n\n        describe(\"ownerOf \", async () => {\n            it(\"ownerOf\", async () => {\n                const tokenId = 1;\n                const receiver = randomAddr;\n                // before should be 0 address\n                const beforeBalance = await contract.ownerOf(tokenId);\n                expect(beforeBalance).to.equal(ZeroAddress);\n\n                // mint\n                await contract.connect(owner).mint(receiver, 1);\n\n                // after should be receiver\n                const holder = await contract.ownerOf(tokenId);\n                expect(holder).to.equal(receiver);\n            });\n        });\n\n        describe('approve', function () {\n            it('owner should approve successfully', async function () {\n                // mint token first\n                const tokenId = 1;\n                await contract.connect(owner).mint(owner.address, tokenId); //mint to self\n\n                const to = randomAddr;\n                await expect(\n                    contract.connect(owner).approve(to, tokenId)\n                ).to.emit(contract, \"Approval\")\n                    .withArgs(owner.address, to, tokenId);\n\n                // getApproved\n                expect(await contract.getApproved(tokenId)).to.equal(to);\n            });\n\n            it('approved account should approve successfully', async function () {\n                // mint token first\n                const tokenId = 1;\n                await contract.connect(owner).mint(owner.address, tokenId); //mint to self\n\n                // setApprovalForAll accounts1\n                const caller = accounts[1];\n                await contract.connect(owner).setApprovalForAll(caller.address, true)\n\n                // accounts1 arpprove owner's tokenId[1] to randomAddr\n                const to = randomAddr;\n                expect(\n                    await contract.connect(caller).approve(to, tokenId)\n                ).to.be.ok;\n\n                // getApproved\n                expect(await contract.getApproved(tokenId)).to.equal(to);\n            });\n\n            it('Approve to current owner should revert', async function () {\n                // mint token first\n                const tokenId = 1;\n                const receiver = owner.address; //self\n                await contract.connect(owner).mint(receiver, tokenId);\n\n                await expect(\n                    contract.connect(owner).approve(receiver, tokenId)\n                ).to.be.revertedWith(\"ERC721: approval to current owner\");\n            });\n\n            it('Not owner nor approved token approveal should revert', async function () {\n                // mint token first\n                const tokenId = 1;\n                const receiver = owner.address; //self\n                await contract.connect(owner).mint(receiver, tokenId);\n\n                const otherAccount = accounts[1]; //not owner or approved\n                await expect(\n                    contract.connect(otherAccount).approve(randomAddr, tokenId)\n                ).to.be.revertedWith(\"ERC721: approve caller is not owner nor approved for all\");\n            });\n        });\n\n        describe('getApproved', function () {\n            it('should return approval address', async function () {\n                // mint token first\n                const tokenId = 1;\n                const receiver = owner.address; //self\n                await contract.connect(owner).mint(receiver, tokenId);\n\n                // approve\n                const approvedAddr = randomAddr;\n                await contract.connect(owner).approve(randomAddr, tokenId);\n\n                expect(await contract.getApproved(tokenId)).to.equal(approvedAddr);\n            });\n\n            it('Approved query for nonexistent token should revert', async function () {\n                const tokenId = 1; // not exists\n\n                await expect(\n                    contract.getApproved(tokenId)\n                ).to.be.revertedWith('ERC721: approved query for nonexistent token');\n            });\n        });\n\n        describe('setApprovalForAll', function () {\n            it('setApprovalForAll true/flase', async function () {\n                // mint token first\n                const tokenId = 1;\n                await contract.connect(owner).mint(owner.address, tokenId); // mint to self\n\n                const spender = randomAddr;\n\n                // set true\n                await contract.connect(owner).setApprovalForAll(spender, true);\n                expect(await contract.isApprovedForAll(owner.address, spender)).to.equal(true);\n\n                // set false\n                await contract.connect(owner).setApprovalForAll(spender, false);\n                expect(await contract.isApprovedForAll(owner.address, spender)).to.equal(false);\n            });\n\n            it('Approve to self should revert', async function () {\n                // mint token first\n                const tokenId = 1;\n                await contract.connect(owner).mint(owner.address, tokenId); // mint to self\n\n                await expect(\n                    contract.connect(owner).setApprovalForAll(owner.address, true) // approve to self\n                ).to.be.revertedWith(\"ERC721: approve to caller\");\n            });\n        });\n\n        describe('transferFrom', function () {\n            it('owner account should succeed and balance should change', async function () {\n                // mint token first\n                const tokenId = 1;\n                await contract.connect(owner).mint(owner.address, tokenId); // mint to self\n\n                const to = randomAddr;\n\n                // balance change\n                await expect(\n                    contract.connect(owner).transferFrom(owner.address, to, tokenId)\n                ).to.changeTokenBalances(contract, [owner.address, to], [-1, 1]);\n            });\n\n            it('approved account should succeed and balance should change', async function () {\n                // mint token first\n                const tokenId = 1;\n                await contract.connect(owner).mint(owner.address, tokenId); // mint to self\n\n                const to = randomAddr;\n\n                // approve\n                const spenderAccout = accounts[1];\n                await contract.connect(owner).approve(spenderAccout.address, tokenId)\n\n                // transfer and balance should change\n                await expect(\n                    contract.connect(spenderAccout).transferFrom(owner.address, to, tokenId)\n                ).to.changeTokenBalances(contract, [owner.address, to], [-1, 1]);\n            });\n\n            it('approvedForAll account should succeed and balance should change', async function () {\n                // mint token first\n                const tokenId = 1;\n                await contract.connect(owner).mint(owner.address, tokenId); // mint to self\n\n                const to = randomAddr;\n\n                // setApprovalForAll\n                const spenderAccout = accounts[1];\n                await contract.connect(owner).setApprovalForAll(spenderAccout.address, true)\n\n                // transfer and balance should change\n                await expect(\n                    contract.connect(spenderAccout).transferFrom(owner.address, to, tokenId)\n                ).to.changeTokenBalances(contract, [owner.address, to], [-1, 1]);\n            });\n\n            it('not owner nor approved should revert', async function () {\n                // mint token first\n                const tokenId = 1;\n                await contract.connect(owner).mint(owner.address, tokenId); // mint to self\n\n                const to = randomAddr;\n                const otherAccount = accounts[1]; //not owner or approved\n                await expect(\n                    contract.connect(otherAccount).transferFrom(owner.address, to, tokenId)\n                ).to.revertedWith(\"ERC721: transfer caller is not owner nor approved\");\n            });\n\n            it('none exists tokenId should revert', async function () {\n                const NONE_EXISTENT_TOKEN_ID = Math.ceil(Math.random() * 1000000);\n                const to = randomAddr;\n                await expect(\n                    contract.connect(owner).transferFrom(owner.address, to, NONE_EXISTENT_TOKEN_ID)\n                ).to.revertedWith(\"ERC721: operator query for nonexistent token\");\n            });\n\n            it('to zero address should revert', async function () {\n                // mint token first\n                const tokenId = 1;\n                await contract.connect(owner).mint(owner.address, tokenId); // mint to self\n\n                const to = ZeroAddress;\n                await expect(\n                    contract.connect(owner).transferFrom(owner.address, to, tokenId)\n                ).to.revertedWith(\"ERC721: transfer to the zero address\");\n            });\n\n            it('from != caller.address should revert', async function () {\n                // mint token first\n                const tokenId = 1;\n                await contract.connect(owner).mint(owner.address, tokenId); // mint to self\n\n                const to = randomAddr;\n                const from = accounts[1].address;\n                await expect(\n                    contract.connect(owner).transferFrom(from, to, tokenId)\n                ).to.revertedWith(\"ERC721: transfer from incorrect owner\");\n            });\n\n            it('should revoke old approval when token transfered', async function () {\n                // mint token first\n                const tokenId = 1;\n                await contract.connect(owner).mint(owner.address, tokenId); // mint to self\n\n                const to = randomAddr;\n\n                // approve\n                const spender = accounts[1].address;\n                await contract.connect(owner).approve(spender, tokenId);\n                expect(await contract.getApproved(tokenId)).to.equal(spender); //before\n\n                // transfer\n                await contract.connect(owner).transferFrom(owner.address, to, tokenId);\n\n                // should revoke approval\n                expect(await contract.getApproved(tokenId)).to.equal(ZeroAddress); // after\n            });\n        });\n\n        describe('safeTransferFrom', function () {\n            // same as transferFrom\n            it('owner should succeed and balance should change', async function () {\n                // mint token first\n                const tokenId = 1;\n                await contract.connect(owner).mint(owner.address, tokenId); // mint to self\n\n                const to = randomAddr;\n\n                // balance change\n                await expect(\n                    contract.connect(owner)[\"safeTransferFrom(address,address,uint256)\"](owner.address, to, tokenId)\n                ).to.changeTokenBalances(contract, [owner.address, to], [-1, 1]);\n            });\n\n            // same as transferFrom\n            it('approved should succeed and balance should change', async function () {\n                // mint token first\n                const tokenId = 1;\n                await contract.connect(owner).mint(owner.address, tokenId); // mint to self\n\n                const to = randomAddr;\n\n                // approve\n                const spenderAccout = accounts[1];\n                await contract.connect(owner).approve(spenderAccout.address, tokenId)\n\n                // transfer and balance should change\n                await expect(\n                    contract.connect(spenderAccout)[\"safeTransferFrom(address,address,uint256)\"](owner.address, to, tokenId)\n                ).to.changeTokenBalances(contract, [owner.address, to], [-1, 1]);\n            });\n\n            // same as transferFrom\n            it('not owner nor approved should revert', async function () {\n                // mint token first\n                const tokenId = 1;\n                await contract.connect(owner).mint(owner.address, tokenId); // mint to self\n\n                const to = randomAddr;\n                const otherAccount = accounts[1]; //not owner or approved\n                await expect(\n                    contract.connect(otherAccount)[\"safeTransferFrom(address,address,uint256)\"](owner.address, to, tokenId)\n                ).to.revertedWith(\"ERC721: transfer caller is not owner nor approved\");\n            });\n\n            it('transfer to none ERC721Receiver implementer should revert', async function () {\n                // mint token first\n                const tokenId = 1;\n                await contract.connect(owner).mint(owner.address, tokenId); // mint to self\n\n                const to = contractAddr; // not support ERC721Receiver\n                await expect(\n                    contract.connect(owner)[\"safeTransferFrom(address,address,uint256)\"](owner.address, to, tokenId)\n                ).to.revertedWith(\"ERC721: transfer to non ERC721Receiver implementer\");\n            });\n\n            it('transfer to ERC721Receiver implementer should succeed', async function () {\n                // mint token first\n                const tokenId = 1;\n                await contract.connect(owner).mint(owner.address, tokenId); // mint to self\n\n                const to = receivercontractAddr; // support ERC721Receiver\n                expect(\n                    await contract.connect(owner)[\"safeTransferFrom(address,address,uint256)\"](owner.address, to, tokenId)\n                ).to.be.ok;\n            });\n        });\n    })\n\n    describe(\"mint\", async () => {\n        it('mint succeed should update balance', async function () {\n            const tokenId = 1;\n\n            await expect(\n                contract.connect(owner).mint(randomAddr, tokenId)\n            ).to.changeTokenBalance(contract, randomAddr, 1);\n        });\n\n        it(\"mint to the zero address should revert\", async () => {\n            const tokenId = 1;\n\n            await expect(\n                contract.connect(owner).mint(ZeroAddress, tokenId)\n            ).to.be.revertedWith(\"ERC721: mint to the zero address\");\n        });\n\n        it(\"mint repeated tokenId should revert\", async () => {\n            const tokenId = 1;\n\n            // first mint\n            await contract.connect(owner).mint(randomAddr, tokenId)\n\n            // sencond\n            await expect(\n                contract.connect(owner).mint(randomAddr, tokenId)\n            ).to.be.revertedWith(\"ERC721: token already minted\");\n        });\n    })\n});"
                }
            ]
        }
    ]
}
