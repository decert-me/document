{
    "title": "Hardhat 开发框架使用测试",
    "description": "Hardhat 是流行的智能合约开发框架，本挑战用来测试你对 Hardhat 的使用了解程度，内容涉及到如何使用 Hardhat 来编译、测试、部署、以及如何进行代码开源验证。\n\n挑战一共包含 18 道选择题， 完成此挑战，你可以收获一枚戴 Hardhat 小黄帽的小浣熊 NFT 。",
    "questions": [
        {
            "title": "Hardhat 是一个用于以太坊智能合约开发的开源框架。它的主要用途包含有：",
            "options": [
                "为 Solidity 开发者提供一个可扩展、可配置和易于使用的开发环境和工具集 。",
                "帮助 Solidity 开发者更加高效地开发和测试智能合约。",
                "帮助 Move 开发者更加高效地开发和测试智能合约。"
            ]
        },
        {
            "title": "如何创建一个新的 Hardhat 项目，以下描述正确的是：",
            "options": [
                "Hardhat 构建在 Node.js 之上，因此需要安装好 Node.js 环境。",
                "需要通过 Node.js 包管理工具安装 hardhat, 例如：`npm install hardhat`。",
                "在终端中通过包运行器运行 hardhat（ 如：\"npx hardhat\" ）， 再根据指引操作就可以一个新的 Hardhat 项目。",
                "可以使用 `hardhat create` 命令创建一个工程。"
            ]
        },
        {
            "title": "通常在新创建的 Hardhat 项目包含哪些文件或文件夹：",
            "options": [
                "`contracts`：智能合约文件目录。",
                "`scripts` ：部署脚本目录。",
                "`test`：智能合约测试用例文件夹。",
                "`hardhat.config.js`：配置文件，配置 hardhat 连接的网络及编译选项等。",
                "`deployment` ： 保存部署后的合约地址及 ABI 等信息。"
            ]
        },
        {
            "title": "在 Hardhat 项目中开发智能合约，以下做法正确的是：",
            "options": [
                "使用 Solidity 编写的智能合约，并将其放置在 contracts 目录中。",
                "使用 JavaScript 编写智能合约文件并将其放置在 contracts 目录中。",
                "使用自己喜欢的代码编辑器 + solidity 插件开发智能合约。",
                "使用自己喜欢的代码编辑器 + JavaScript 插件开发智能合约。"
            ]
        },
        {
            "title": "关于 `hardhat.config.js` 的作用描述正确的是:",
            "options": [
                "在 hardhat.config.js 可以配置多个区块链网络。",
                "在 hardhat.config.js 可以配置多个账号用于部署和测试合约。",
                "在 hardhat.config.js 可以配置多个 solidity 编译器版本。",
                "在 hardhat.config.js 可以配置测试多个不同的合约。"
            ]
        },
        {
            "title": "在 Hardhat 工程中关于编译智能合约说法正确的是？",
            "options": [
                "在终端中运行 \"npx hardhat compile\" 命令来编译智能合约。",
                "在终端中运行 \"npx hardhat build\" 命令来编译智能合约。",
                "在编译前，hardhat 会判断是否所有符合要求的编译器，如果没有则会连网下载编译器。",
                "编译成功后，会生成合约的 ABI 与 字节码。"
            ]
        },
        {
            "title": "在 Hardhat 工程中关于调试智能合约以下的正确的是：",
            "options": [
                "配合 Hardhat node ， 可以在 Solidity 中引入 \"hardhat/console.sol\" 调用 console.log() 打印一些变量的值",
                "在代码编辑器中，设置断点，在运行在该代码处，hardhat 会自动显示该处相关变量的值。",
                "在测试脚本中可以使用 debugger 关键字来给合约设置断点进行调试。"
            ]
        },
        {
            "title": "如何使用 Hardhat 本地环境进行测试？",
            "options": [
                "通过编写测试脚本，然后终端运行 \"npx hardhat test\" 命令来进行本地测试。",
                "使用 \"npm run test <test_script_name>\"命令来运行某个特定的测试。",
                "执行 npm run test 时，可以指定 `--network <network-name>` 指定在哪一个网络上执行测试。",
                "Hardhat 框架会自动运行测试，不需要手动执行。"
            ]
        },
        {
            "title": "如何在 Hardhat 中连接不同的以太坊网络？",
            "options": [
                "在 hardhat.config.js 配置网络的节点的 IP 地址和端口号。",
                "Hardhat 本身是一个以太坊节点，不需要额外连接网络。",
                "在 hardhat.config.js 配置 Infura 等节点服务商的 RPC URL。"
            ]
        },
        {
            "title": "如何使用 Hardhat 部署智能合约？",
            "options": [
                "编写部署脚本，然后运行 \"npx hardhat run 脚本名\" 命令来部署智能合约。",
                "在部署脚本需要指定部署的顺序，如：1_deploy.js ，以便在”npx hardhat run deploy“ 时，按顺序部署合约。",
                "执行部署脚本时，可以通过 `--network <network-name>` 来指定部署到哪一个网络。"
            ]
        },
        {
            "title": "在 Hardhat 测试脚本中， 如何使用多个账号进行测试？",
            "options": [
                "需要先在 hardhat.config.js 文件中相应网络下，先配置助记词或多个账户私钥。",
                "使用 Hardhat node 网络时，它会默认提供多个可用的账号。",
                "在测试脚本中，可以使用 const [acc1, acc2] = await ethers.getSigners(); 来获得多个地址。",
                "Hardhat 不支持使用多个账户进行测试。"
            ]
        },
        {
            "title": "在 Hardhat 工程中，编写一个自己的 ERC20 Token 合约，推荐的做法是：",
            "options": [
                "在智能合约中引入 OpenZeppelin 的 ERC20 合约，并继承 ERC20 合约。",
                "使用 hardhat-erc20 插件来创建 ERC20 合约，不用自己编写代码。",
                "在部署合约之前，先对 ERC20 合约测试之后，再部署。",
                "因为使用 hardhat-erc20 插件来部署合约，因此不需要测试。"
            ]
        },
        {
            "title": "关于合约源代码验证，描述正确的是：",
            "options": [
                "合约源代码开源很重要，因为开源后，用户就可以基于合约逻辑来确定要不要与合约交互，而不需要信任合约的开发方。",
                "源代码验证会比较智能合约的源代码编译出字节码和合约创建时字节码是否相同",
                "由于编译器的版本及优化选项会影响字节码的输出，因此合约源码验证时，需要和之前部署合约的编译器的版本及优化选项一致。"
            ]
        },
        {
            "title": "关于如何使用 Hardhat 在 Etherscan 进行合约源码验证，操作正确的是:",
            "options": [
                "在 Hardhat 中，可以使用 hardhat-etherscan 或 hardhat-verify 插件来进行源码验证。",
                "hardhat-etherscan 插件仅支持以太坊主网的代码验证，不支持测试网或 Polygon 、BNB Chain 网络。",
                "在使用 hardhat-etherscan 进行合约源码验证时， 需要在 etherscan 网站获取一个 API key 。",
                "使用命令： `npx hardhat verify <deployed-address> --network <network-name>` 来执行源码验证。",
                "使用命令： `npx hardhat upload <contract-name> --network <network-name>` 来执行源码验证。"
            ]
        },
        {
            "title": "如何在 Hardhat 中使用插件？",
            "options": [
                "需要用 Node.js 包管理工具先安装插件。",
                "需要在 hardhat.config.js 文件中引入插件。",
                "在命令行中使用 `npx hardhat plugin install` 命令安装插件。 "
            ]
        },
        {
            "title": "关于 Hardhat 的任务（task），以下说法正确的是:",
            "options": [
                "使用 npx hardhat 可以查看当前所有可用的任务。",
                "在编译、部署时，其实是调用 Hardhat 内置的任务。",
                "可以按需要添加自己的任务。",
                "使用 `npx hardhat task-name` 来执行任务。"
            ]
        },
        {
            "title": "关于 Hardhat fork 功能描述正确的是?",
            "options": [
                "Fork 主网的命令是：`npx hardhat node —fork rpc_url` 。",
                "Fork 主网可以在本地生成一个模拟主网状态的本地环境，方便合约测试。",
                "Fork 主网需要连接存档节点（archive node）， 而不是全节点（full node）。",
                "fork 主网需要连接全节点（full node）， 而不是存档节点（archive node）。"
            ]
        },
        {
            "title": "在使用 Hardhat 进行项目开发时，以下哪些是推荐的安全实践：",
            "options": [
                "在 hardhat.config.js 文件中直接配置私钥或助记词。",
                "在代码管理工具不跟踪的文件（如 .env 文件）中配置私钥或助记词。",
                "每个项目最好能使用独立的钱包账号来部署合约，避免账号泄露时影响到其他项目。",
                "在代码管理工具不跟踪的文件（如 .env 文件）中配置 API KEY。"
            ]
        }
    ]
}
