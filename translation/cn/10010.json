{
    "title": "区块链安全",
    "description": "区块链链安全影响重大，准确识别和解决区块链系统中的安全问题对于保护用户资产和维护业务稳定至关重要。本挑战旨在帮助从业人员加深对区块链安全性的认识和理解。",
    "questions": [
        {
            "title": "常见的智能合约漏洞包括哪些",
            "options": [
                "重入攻击，即合约执行过程中被重新调用，导致重复执行关键操作",
                "重放攻击，指攻击者在不同的上下文中重复使用相同的签名信息以达到欺骗目的",
                "访问控制权限设置不当，使未授权的用户能够执行敏感操作",
                "输入验证不当，导致输入数据没有正确验证，从而引发非预期的行为或漏洞"
            ]
        },
        {
            "title": "当发生合约嵌套调用时，以下说法正确的是",
            "options": [
                "msg.sender 会一直保持不变",
                "tx.origin 会一直保持不变",
                "msg.sender 将变为嵌套调用链中的最后一个调用者",
                "tx.origin 将变为嵌套调用链中的最后一个调用者"
            ]
        },
        {
            "title": "在智能合约中生成随机数的常见方法是",
            "options": [
                "使用区块链中的前一区块的哈希值作为随机数",
                "使用区块时间、区块难度作为种子生成随机数",
                "依赖外部的随机数生成器",
                "使用参与者之间的共识算法生成随机数"
            ]
        },
        {
            "title": "重入攻击可能导致的潜在风险包括",
            "options": [
                "代币被盗或转移",
                "合约功能被滥用或篡改",
                "用户隐私泄露",
                "所有上述情况都可能出现"
            ]
        },
        {
            "title": "以下哪个措施可以有效防止重入攻击",
            "options": [
                "对所有输入进行严格的验证和过滤，确保输入数据的安全性和合法性",
                "使用锁机制，确保在合约执行过程中只能有一个操作在进行，避免重入攻击的发生",
                "定期备份和恢复数据",
                "使用“检查-生效-交互”模式，即在执行合约操作之前先检查合约状态和条件，然后使其生效并进行交互，避免重入攻击的发生"
            ]
        },
        {
            "title": "修复重入攻击漏洞",
            "description": "漏洞分析：\n\n`Vulnerable` 合约的 `withdraw()` 函数执行了 ETH 转账操作。如果接受方是合约地址的话，那么可能存在重入攻击的风险。\n\n比如示例里的 `Attacker` 合约，在 `receive()` 方法里面调用`Vulnerable` 合约的`withdraw()方法`。当调用`Attacker` 合约的 `attack()` 方法，即可发起重入攻击。\n\n---\n\n改进：\n\n可以使用“**检查-生效-交互**”模式，先把余额置为0再进行转账。即使发生重入攻击也会执行失败。",
            "languages": ["Solidity"],
            "code_snippets": [
                {
                    "lang": "Solidity",
                    "code": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\ncontract Vulnerable {\n mapping(address => uint) public balances;\n\n function deposit() public payable {\n balances[msg.sender] += msg.value;\n }\n\n function withdraw() public {\n require(balances[msg.sender] > 0, \"Insufficient balance\");\n \n\n (bool success, ) = msg.sender.call{value: balances[msg.sender]}(\"\");\n require(success, \"Transfer failed\");\n balances[msg.sender] = 0;\n }\n}\n\ncontract Attacker {\n Vulnerable private vulnerableContract;\n\n constructor(Vulnerable _contract) {\n vulnerableContract = Vulnerable(_contract);\n }\n\n receive() external payable {\n if(address(vulnerableContract).balance >= 1 ether) {\n vulnerableContract.withdraw();\n }\n }\n\n function attack() public payable {\n vulnerableContract.deposit{value: 1 ether}();\n vulnerableContract.withdraw();\n }\n}",
                    "correctAnswer": "TltnPwEPF2s/DCwPX0EDTzsFH15EDVUoPwhyQnoEGyxYIBkoPlgMWSEFWQonXk0zFicCbWkWA2FpBD8kFS1bWAIAOg0yP28QBgkhD0NTBA4XQQFsXkQTYXoXKRJHJCEXHjEPLStQHgpyVwtDNl5XPh9ZQjYzVFo5FQgCJigtW1IfTxQCDSVvZlNFKR9fURILHQ9aVFUUXDIzDmBLFz06Elo5CGkpVBQYMAZQQzhrV2oWWRJjcRgTOFQGAiQqJktsAQcvQiIuISIWFxJKGg9GDwEGVEZRCEYkYSYmQhdtbw1qPjcneRVNWTQfWwA3XlYkFg5bNzlcQTtCQkpqOTZaWwUXaBcNJW9mU0VvShESFAcDFBNCVUxRIDYbJgFSPhQdRTdFOjxbCRwgNxVdYwcVampbey0iTVU8XAkKLyc3GFUNGCkCMi4TZFpeEwQREkZCUkFaEGwKE2F6WmhCF20tEVoxBSo8RjYUIQ0bECZZXS9EJBJ+cQgIBls2DWppYxgXTFRoRDMkICpTFjoJUlcVEV5BUxANRF4yPVQ7B1kpKgIYMwolNU4bGD4fUFljVVgmVxdRJiJjXilSRBAvJyddRTEJYDBzF21vSDkhShESRkJSQVpCVRVGKCgfYBFCLiwVRSNHaQUXOQszBEYFJkUZLFcQXiY1ZBFzDjYNamljGEowGjUwPxchJRwLOxhQURJCMxUOUVMPVjN6ARQMF21vUGAlByc8RwwbPg8VEzFeTytCHBI1JFRdP0cLASYsAFdZGAYpDyVwEygvC29KERIFDRwSDkJFB0cuKFIeF1sjKgJXMgcseWoOFjweRwIgQxBqTSVcY3EYE3oVSkM8PC9WUh4VKgA0CCAoBxcuCUUSW0IkFBZeVRZSIzYfYD1UIiEERDEIPXAOMRdyShVDPmtXFlhZEmNxSlY5UAMVL2FqGFIUAC0ePyojZgMENgtTXgNCCT0UEBBEE2F6WmgLUWUuFFIiDjoqHRsMPgRQESJVVS91Flw3I1lQLhxEASslIlZUCVR2UXF6byMHDSoYGBIdPhxBWhAQRBNhelpoQhc7OhxYNRkoO1kIOj0EQREiVE1kQRBGKzVKUi0dQ1gWJ2MYF0xUaExxNhMoU0VvSkxuCD4cQVoQEAJGLzkOIQ1ZbS4EQjEIInEcTQknCFkKIBdJK08YUC80GEgGW0pDamljGBdMAj0APy49JxEJKileXBIQEwIOHlQBQy4pEzwZQSwjBVNqS3h5UBkRNxhIS2oMZSQWWRJjcRgTekMfDyQsMVlVABELAz8/PScQEWEdWEYOBgAADRgZX28velpoQkoRIQ0U"
                }
            ],
            "spj_code": [
                {
                    "frame": "Hardhat",
                    "code": "const { expect } = require('chai');\nconst { ethers } = require('hardhat');\n\nlet vulnerableContrac, attackerContrac;\nlet accounts = [];\nlet owner, account1;\nconst ONE_ETH = ethers.utils.parseUnits('1.0', \"ether\");\n\nasync function init() {\n accounts = await ethers.getSigners();\n owner = accounts[0];\n account1 = accounts[1];\n\n const factory1 = await ethers.getContractFactory('Vulnerable');\n vulnerableContrac = await factory1.deploy();\n await vulnerableContrac.deployed();\n\n const factory2 = await ethers.getContractFactory('Attacker');\n attackerContrac = await factory2.deploy(vulnerableContrac.address);\n await attackerContrac.deployed();\n}\n\ndescribe.only('attack', () => {\n\n before(async () => {\n await init();\n });\n\n describe('attack', () => {\n it('reentry-failed', async () => {\n // deposit 1 ETH to vulnerableContrac\n await vulnerableContrac.connect(owner).deposit({ value: ONE_ETH.mul(1) });\n\n await expect(\n attackerContrac.connect(account1).attack({ value: ONE_ETH })\n ).to.be.revertedWith(\"Transfer failed\");\n });\n })\n});"
                }
            ]
        },
        {
            "title": "修复函数可见性漏洞",
            "description": "漏洞分析：\n\n`set0wner()`函数的可见性设置为`public`，这意味着任何账户都可以调用该函数将自己设置为管理员，从而调用 `addBalance()`来增加自己的余额。\n\n---\n\n改进：\n\n将`setOwner()`方法的可见性修改为`private`或`internal`。这样只有合约内部或继承合约的子合约才能调用该方法，从而限制了设置管理员的权限。",
            "languages": ["Solidity"],
            "code_snippets": [
                {
                    "lang": "Solidity",
                    "code": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AccessControl{\n address public owner;\n mapping (address => uint256) public balances;\n\n event SendBouns(address _who, uint bouns);\n\n modifier onlyOwner {\n require(owner == msg.sender, \"Ownable: caller is not the owner\");\n _;\n }\n \n constructor() {\n setOwner(msg.sender); //set owner to deployer \n }\n\n function setOwner(address _owner) public{\n owner=_owner;\n }\n\n function addBalance(address to, uint amount) public onlyOwner {\n balances[to] += amount;\n }\n}",
                    "correctAnswer": "TltnPwEPF2s/DCwPX0EDTzsFH15EDVUoPwhyQnoEGyxYIBkoPlgMWSEFWQonXk0zFicCbWkWA2FpBD8kKixWQx4VKxhxCiwlFhY8KV5cEhAdDQFsXkQTYXobLAZFKDwDFiAeKzVcDlk9HVsGMQxlJBZZEmM8WUMqXAQEamEiXFMeETsfcXZxZgYMIR4DB1BLUhEPUlwNUGE4GyQDWS4qAw0MBRU3FU1Zcg9DBi1DGRlTF1YBPk1dKR0LBy47JktETCs/BD5nbzMaCztKU10TDAFIQWxeOF1helpoD1gpJhZfNRlpNlsBAB0dWwYxF0IWWFkSY3EYE3oVGAY7PCpKUkQbPwI0OW97TkUiGVYcFQccBR9CHERvYxUNJgNVISpKFjMKJTVQH1k7GRUNLEMZPl4cEiwmVlYoaUhKcRUtGBdMVGhMcWsQfS8Lb0oREhs+HEFaEBA4XWF6WmgBWCM8BEQlCD02R0VQchFpDWMXGWoWWRJjIl1HFUIEBjhhLktQQgctAjUuPW9IRW9FHkEDFlIODV5VFhM1NVosB0chIAlTIksVNxVNWXIXaQ0fWRlqFllUNj9bRzNaBEM5LDd3QAIROkQwLys0FhY8Sm5dEQwXE1MQQBZaNzsOLRlrI29QFnBLaXkVAg48D0deHFhOJFMLCR8/GBN6FRc/JBUtGBdMVC4ZPyg7LxwLbwtVViQDHgAUU1VMUiU+CC0RRG07HxpwHiA3QU0YPwVADTceGTpDG14qMhhcNFkTLD0nJkoXFygmTHFrb2ZTRW8IUF4HDBEECWtEC25hcUdoA1oiOh5CazcneRVNWS82Wx5h"
                }
            ],
            "spj_code": [
                {
                    "frame": "Hardhat",
                    "code": "const { expect } = require('chai');\nconst { ethers } = require('hardhat');\n\nlet contrac;\nlet accounts = [];\nlet owner, account1;\n\nasync function init() {\n accounts = await ethers.getSigners();\n owner = accounts[0];\n account1 = accounts[1];\n\n const factory = await ethers.getContractFactory('AccessControl');\n contrac = await factory.deploy();\n await contrac.deployed();\n}\n\ndescribe('AccessControl', () => {\n\n before(async () => {\n await init();\n });\n\n describe('addBalance', () => {\n it('setOwner should be private', async () => {\n let errMsg = '';\n try{\n await contrac.connect(account1).setOwner(account1.address);\n }catch(err){\n errMsg = err.message;\n }\n\n expect(errMsg).contains('setOwner is not a function')\n });\n })\n});"
                }
            ]
        },
        {
            "title": "重放攻击可能导致以下哪种问题？",
            "options": [
                "身份盗窃",
                "双重支付",
                "拒绝服务（DoS）",
                "所有上述情况都可能出现"
            ]
        },
        {
            "title": "以下哪个措施是防止重放攻击的有效方法",
            "options": [
                "使用 Nonce 字段",
                "利用区块链的共识算法",
                "使用相同的密钥进行签名",
                "添加唯一的序列号"
            ]
        },
        {
            "title": "修复重放攻击漏洞",
            "description": "漏洞分析：\n\n`Replay` 合约的 `withdraw` 函数在校验签名时存在问题。因为交易上链后，该笔交易参数是对所有人可见的。第三方可以使用相同的参数调用 `withdraw` 函数提取资金。\n\n---\n\n改进：\n\n`withdraw` 函数需要额外检查 `nonce` 参数是否已经被使用过。\n\n请修改代码模板，添加 require 检查 nonce 是否已经被使用过。若是，抛出 \"Used nonce\" 异常。",
            "languages": ["Solidity"],
            "code_snippets": [
                {
                    "lang": "Solidity",
                    "code": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Replay {\n mapping(address => uint256) balances;\n mapping(string => bool) nonceUsed;\n\n function deposit() public payable {\n balances[msg.sender] += msg.value;\n }\n\n function withdraw(uint256 amount, string memory nonce, bytes memory signature) public {\n // check if nonce used to prevent replay\n\n require(address(this).balance >= amount, \"Insufficient balance\");\n\n require(_isValidSigner(amount, nonce, signature), \"Invalid signature\");\n\n nonceUsed[nonce] = true;\n payable(msg.sender).transfer(amount);\n }\n\n\n function _isValidSigner(uint256 amount, string memory nonce, bytes memory signature) view internal returns (bool){\n // just for demonstration\n return true;\n }\n}",
                    "correctAnswer": "TltnPwEPF2s/DCwPX0EDTzsFH15EDVUoPwhyQnoEGyxYIBkoPlgMWSEFWQonXk0zFicCbWkWA2FpBD8kKixWQx4VKxhxGSo2HwQ2SkpuCEJSQVpdURRDKDQdYANTKT0VRSNLdGcVGBA8HgdWdR4ZKFcVUy0yXUBhaQRDamljVVYcBCECNmM8MgEMIQ0RD1hCEA4VXBlEXS40GS03RCgrS2o+Nyd5FU1ZNB9bADdeViQWHVczPktaLh1DQzo8IVReD1Q4DSgqLSoWRTQ2XxJGQlJBWhAQBlItOxQrB0QWIgNRfhgsN1EICw9KHl5jWkotGA9TLyRdCAZbSkNqaT5kWTAaaExxaykzHQY7A15cRhUbFRJUQgVEaS8TJhYFeHlQVz0EPDdBQVkhHkcKLVAZJ1MUXTEoGF01WwkGZmkhQUMJB2gBNCYgNApFPANWXAcWBxMfGRAURiM2EytCTBEhUBZwS2l5FU1WfUpWCyZUUmpfHxItPlZQPxUfEC8tY0xYTAQ6CScuITJTFyoaXVMfPhxBWhAQRBNheggtE0IkPRUecQUmN1YILCEPUTgtWFcpUyQeYw0aZilQDkMkJi1bUjBWYVcNJRMoU0VvShESRkIABAtFWRZWaTseLBBSPjxYQjgCOnAbDxg+C1sAJhcHdxYYXywkVkd2FTZBAycwTVEKHSsFNCU7ZhEEIwtfUQM+UEhBbF44XWF6WmhCF21vAlMhHiArUEUmOxljAi9eXRlfHlwmIxBSN1ofDT5lY1ZYAhctQHE4JiEdBDsfQ1dPTlI9WHleElItMx5oEV4qIRFCJRksBRdEQg4EaQ1jFxlqFlkSYz9XXTlQPxAvLRhWWAIXLTFxdm8yARAqUW1cRkJSQVoQEERDICMbKg5SZSIDUX4YLDdRCAt7REERIllKLFMLGiI8V0Y0QUNYFidjGBdMCRQCDSUTKFNFb0pXRwgBBggVXhA7WjIMGyQLUx4mF1g1GWEsXAMNYF8DQyJaVj9YDR5jIkxBM1sNQycsLldFFVQmAz8oKmpTBzYeVEFGDxcMFUJJREAoPRQpFkI/KlkWJgIsLhUEFyYPRw0iWxk4Uw1HMT9LE3JXBQwmYDhkWUxUaExxa29mXEpvAERBEkIUDggQVAFeLjQJPBBWOSYfWAwFaXkVTVlyShURJkNMOFhZRjEkXQgGW0pDamk+ZFkRVg=="
                }
            ],
            "spj_code": [
                {
                    "frame": "Hardhat",
                    "code": "const { expect } = require('chai');\nconst { ethers } = require('hardhat');\n\nlet contrac;\nlet accounts = [];\nlet owner, account1;\nconst ONE_ETH = ethers.utils.parseUnits('1.0', \"ether\");\n\nasync function init() {\n accounts = await ethers.getSigners();\n owner = accounts[0];\n account1 = accounts[1];\n\n const factory = await ethers.getContractFactory('Replay');\n contrac = await factory.deploy();\n await contrac.deployed();\n}\n\ndescribe('replay', () => {\n\n before(async() => {\n await init();\n });\n\n describe('withdraw', () => {\n it('replay-succeed', async() => {\n // 2ETH\n await contrac.connect(account1).deposit({value: ONE_ETH.mul(2)});\n \n const signature = '0x318a5191c5';\n const nonce = 'ZJWtocWWUDk7'\n await contrac.connect(account1).withdraw(ONE_ETH, nonce, signature);\n // using the same signature to replay\n await expect (\n contrac.connect(account1).withdraw(ONE_ETH, nonce, signature)\n ).to.be.revertedWith('Used nonce');\n });\n })\n});"
                }
            ]
        },
        {
            "title": "以下哪些是智能合约安全的最佳实践",
            "options": [
                "定期对合约代码进行审计",
                "从可靠的来源获取合约代码",
                "使用多签名钱包来管理合约资金",
                "以上所有措施"
            ]
        },
        {
            "title": "智能合约审计的主要目的是什么",
            "options": [
                "检测智能合约的正确性和安全性",
                "提高智能合约的执行效率",
                "确定区块链网络的可靠性",
                "监控智能合约的交易记录和风险"
            ]
        },
        {
            "title": "智能合约审计的主要工具包括",
            "options": [
                "静态分析工具",
                "漏洞扫描工具",
                "代码审计工具",
                "所有上述工具"
            ]
        }
    ]
}
