{
    "title": "Golang 基础知识测试",
    "description": "Golang 是一种静态类型的编程语言，具有高性能、高并发和语法简洁的特点。\n本挑战用来测试对 Golang 基础知识的了解。\n挑战包含约 16 道选择题，可能有一个或多个答案，请仔细答题。",
    "questions": [
        {
            "title": "下面哪些是 Go 语言的主要特点？",
            "options": [
                "静态类型语言",
                "自动垃圾回收",
                "支持面向对象编程",
                "并发支持"
            ]
        },
        {
            "title": "在 Go 语言中，以下哪个关键字用于定义一个函数？",
            "options": ["func", "function", "def", "fun"]
        },
        {
            "title": "在 Go 语言中，下面哪个关键字用于定义一个常量？",
            "options": ["var", "let", "const", "constant"]
        },
        {
            "title": "在 Go 语言中，以下哪个关键字用于声明一个新的结构体类型？",
            "options": ["struct", "type", "new", "make"]
        },
        {
            "title": "在 Go 语言中，以下哪些是有效的数据类型？",
            "options": ["float32", "uint", "string", "bool", "byte"]
        },
        {
            "title": "在 Go 语言中，以下哪些是有效的循环结构？",
            "options": ["for", "while", "loop"]
        },
        {
            "title": "Go 语言中的 range 关键字用于什么？",
            "options": [
                "遍历数组和切片",
                "声明常量",
                "控制循环的次数",
                "定义函数"
            ]
        },
        {
            "title": "在 Go 语言中，下面哪个函数可以从切片中移除指定位置的元素？",
            "options": [
                "remove(s, index)",
                "delete(s, index)",
                "append(s[:index], s[index+1:]...)",
                "pop(s, index)"
            ]
        },
        {
            "title": "下面哪个选项是正确的 Go 语言的切片声明和初始化方式？",
            "options": [
                "var s []int = [1, 2, 3]",
                "var s = [3]int{1, 2, 3}",
                "s := []int{1, 2, 3}",
                "s := [3]int{1, 2, 3}"
            ]
        },
        {
            "title": "以下代码片段的输出顺序是什么？\n```golang\npackage main\n\nimport \"fmt\"\n\nfunc foo() {\n defer fmt.Println(1)\n defer fmt.Println(2)\n fmt.Println(3)\n}\n\nfunc main() {\n foo()\n defer fmt.Println(4)\n}\n```",
            "options": ["1 2 3 4", "3 2 1 4", "3 1 2 4", "1 3 2 4"]
        },
        {
            "title": "关于协程，下面说法正确是",
            "options": [
                "协程和线程都可以实现程序的并发执行",
                "线程比协程更轻量级",
                "协程不存在死锁问题",
                "通过 channel 来进行协程间的通信"
            ]
        },
        {
            "title": "golang 中的引用类型包括",
            "options": ["slice", "map", "channel", "interface"]
        },
        {
            "title": "关于 init 函数，下面说法正确的是",
            "options": [
                "一个包中可以包含多个 init 函数",
                "程序编译时，先执行导入包的 init 函数，再执行本包内的 init 函数",
                "main 包中不能有 init 函数",
                "init 函数可以被其他函数调用"
            ]
        },
        {
            "title": "关于内存泄露，下面说法正确的是",
            "options": [
                "golang 有自动垃圾回收，不存在内存泄露",
                "golang 中检测内存泄露主要依靠的是 pprof 包",
                "内存泄露可以在编译阶段发现"
            ]
        },
        {
            "title": "关于字符串连接，下面语法正确的是：",
            "options": [
                "str := 'abc' + '123'",
                "str := \"abc\" + \"123\"",
                "str := '123' + \"abc\"",
                "fmt.Sprintf(\"abc%d\", 123)"
            ]
        },
        {
            "title": "在 Golang 中，以下哪些是 channel 的特点？",
            "options": [
                "channel 用于在 Goroutine 之间进行通信和数据传递。",
                "channel 可以被关闭，用于通知接收方数据传输结束。",
                "channel 可以同时用于发送和接收数据。",
                "channel 的容量（缓冲大小）可以动态调整。"
            ]
        }
    ]
}
